#!/usr/bin/env bash
# shellcheck disable=SC2155

# Hook to update "Last revisit" date in modified files

# Get current date in YYYY-MM-DD format
CURRENT_DATE=$(date +%Y-%m-%d)

# Declare STAGED_FILES as an array
declare -a STAGED_FILES

readonly cl_grey=$(tput setaf 8)
readonly cl_gray=$cl_grey # alias to the same color
readonly cl_reset=$(tput sgr0)

# Prefer custom GNU tools from bin/gnubin if available, then fallback to Linux aliases
if [[ -d "$REPO_ROOT/bin/gnubin" ]]; then
  export PATH="$REPO_ROOT/bin/gnubin:$PATH"
fi

# Fallback to Linux aliases if custom GNU tools are not available
if [[ "$(uname)" == "Linux" ]]; then
  command -v ggrep >/dev/null 2>&1 || alias ggrep='grep'
  command -v gsed >/dev/null 2>&1 || alias gsed='sed'
fi

# Check if HOOK_TEST environment variable is set (TEST mode)
# or not set (PRODUCTION mode via git hook)
if [[ -n "${HOOK_TEST}" ]]; then
  # TEST mode - use command line arguments as file list
  echo "${cl_gray}Running in TEST mode with files from command line arguments${cl_reset}" >&2
  # Use command line arguments as the file list
  STAGED_FILES=("$@")

  # in TEST mode replace `git` command by `echo`
  git() {
    echo "${cl_gray}## git" "$@" "${cl_reset}" >&2
  }
else
  # Use readarray to populate the array from git diff output
  readarray -t STAGED_FILES < <(git diff --cached --name-only --diff-filter=ACMR -- "*.sh")
fi

# Check if the array is empty
if [[ ${#STAGED_FILES[@]} -eq 0 ]]; then
  echo "${cl_grey}No .sh files to process (pre-commit-copyright-last-revisit)${cl_reset}"
  exit 0
fi

# Process all files
for FILE in "${STAGED_FILES[@]}"; do
  # Skip if file doesn't exist (could happen with some git operations)
  [ ! -f "$FILE" ] && continue

  # Check if file contains "## Last revisit:" line
  if ggrep -q "## Last revisit:" "$FILE"; then
    # Update the "## Last revisit:" line with current date
    MAX_BACKUP=$(find . -type f -name "$FILE.~*~" | gsed -E 's/.*~([0-9]+)~.*/\1/' | sort -n | tail -1)

    # increase backup number
    MAX_BACKUP=$((MAX_BACKUP + 1))

    # do the modification
    gsed --in-place=".~$MAX_BACKUP~" "s/## Last revisit: [0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}/## Last revisit: $CURRENT_DATE/g" "$FILE"

    # Re-stage the file if it was modified
    git add "$FILE"
    echo "âœ… Updated 'Last revisit' date in $FILE"
  fi
done

exit 0
